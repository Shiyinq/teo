[
    {
        "type": "function",
        "function": {
            "name": "get_current_weather",
            "description": "Get the current weather in a given location",
            "parameters": {
                "type": "object",
                "properties": {
                    "location": {
                        "type": "string",
                        "description": "The city and state, e.g. San Francisco, CA"
                    },
                    "unit": {
                        "type": "string",
                        "enum": [
                            "celsius",
                            "fahrenheit"
                        ]
                    }
                },
                "required": [
                    "location"
                ]
            }
        }
    },
    {
        "type": "function",
        "function": {
            "name": "scrape_web_data",
            "description": "Scrape data from a specified URL using the scraping tool",
            "parameters": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "description": "The full URL of the web page to scrape, e.g. https://r.jina.ai/example"
                    }
                },
                "required": [
                    "url"
                ]
            }
        }
    },
    {
        "type": "function",
        "function": {
            "name": "notes",
            "description": "A tool to manage notes with support for multiple operations. The tool supports the following actions:\n1. GET: Retrieves a list of all notes with their metadata (title, content, creation date, and last update date).\n2. GET_DETAIL: Fetches the complete details of a specific note including metadata.\n3. POST: Creates a new note with a specified title and content. The note will be stored with creation and update timestamps.\n4. PUT: Updates the content of an existing note and updates its timestamp.\n5. DELETE: Deletes an existing note.\n6. SEARCH: Searches through notes by title or content using case-insensitive matching.\n7. GET_BY_DATE: Retrieves notes created within a specified date range (format: YYYY-MM-DD).",
            "parameters": {
                "type": "object",
                "properties": {
                    "action": {
                        "type": "string",
                        "enum": [
                            "GET",
                            "GET_DETAIL",
                            "POST",
                            "PUT",
                            "DELETE",
                            "SEARCH",
                            "GET_BY_DATE"
                        ],
                        "description": "Action to perform on the note"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the note (required for GET_DETAIL, POST, PUT, DELETE)"
                    },
                    "content": {
                        "type": "string",
                        "description": "The content of the note (required for POST and PUT)"
                    },
                    "search": {
                        "type": "string",
                        "description": "Search query for searching through notes (required for SEARCH action)"
                    },
                    "start_date": {
                        "type": "string",
                        "description": "Start date for filtering notes (format: YYYY-MM-DD, required for GET_BY_DATE)"
                    },
                    "end_date": {
                        "type": "string",
                        "description": "End date for filtering notes (format: YYYY-MM-DD, required for GET_BY_DATE)"
                    }
                },
                "required": [
                    "action"
                ]
            }
        }
    },
    {
        "type": "function",
        "function": {
            "name": "filesystem",
            "description": "Manages files and directories within allowed locations. You can combine these functions to perform complex tasks. All paths must be within permitted directories.\nAvailable functions:\n- \"read_file\": Reads the entire content of a single specified file.\n- \"read_multiple_files\": Reads contents of several files at once. Provide paths as a JSON array or comma-separated string for the 'path' argument.\n- \"write_file\": Creates a new file or overwrites an existing one with provided content. Use with caution.\n- \"edit_file\": Performs line-based edits on a text file. Specify start/end lines and new content. Returns a diff.\n- \"create_directory\": Creates a new directory. Can create nested directories. Silent if directory already exists.\n- \"list_directory\": Lists all files and subdirectories in a specified directory, marking type (FILE/DIR).\n- \"directory_tree\": Provides a recursive JSON tree view of files and directories from a starting path.\n- \"move_file\": Moves or renames files/directories. Fails if destination exists.\n- \"search_files\": Recursively searches for files/directories matching a case-insensitive pattern.\n- \"get_file_info\": Retrieves detailed metadata (size, type, modified time, permissions) for a file or directory.\n- \"list_allowed_directories\": Shows the list of directories this tool can access.\n- \"delete_path\": Deletes a specified file or directory. Use the 'delete_recursive' boolean parameter to delete non-empty directories.\n\nConsider chaining these operations. For example: list files with `list_directory`, read one with `read_file`, modify it with `edit_file`, then verify with `get_file_info`. Or, create a directory structure with `create_directory` then populate it using `write_file` or `move_file`.",
            "parameters": {
                "type": "object",
                "properties": {
                    "tool_name": {
                        "type": "string",
                        "description": "The specific file system function to execute.",
                        "enum": [
                            "read_file",
                            "read_multiple_files",
                            "write_file",
                            "edit_file",
                            "create_directory",
                            "list_directory",
                            "directory_tree",
                            "move_file",
                            "search_files",
                            "get_file_info",
                            "list_allowed_directories",
                            "delete_path"
                        ]
                    },
                    "path": {
                        "type": "string",
                        "description": "The primary path for the operation (e.g., file to read, directory to list, file to edit for edit_file, path to delete for delete_path). For read_multiple_files, this can be a JSON array of paths or a comma-separated string of paths."
                    },
                    "content": {
                        "type": "string",
                        "description": "Content to be written to a file (used by write_file)."
                    },
                    "old_path": {
                        "type": "string",
                        "description": "The source path for a move operation (for move_file)."
                    },
                    "new_path": {
                        "type": "string",
                        "description": "The destination path for a move operation (for move_file)."
                    },
                    "pattern": {
                        "type": "string",
                        "description": "The search pattern for search_files."
                    },
                    "edit_start_line": {
                        "type": "integer",
                        "description": "The 1-indexed line number where the edit should begin. Required for edit_file."
                    },
                    "edit_end_line": {
                        "type": "integer",
                        "description": "Optional. The 1-indexed line number where the edit should end (inclusive). If not provided or less than edit_start_line, only the single line at edit_start_line is targeted for replacement by edit_new_content."
                    },
                    "edit_new_content": {
                        "type": "string",
                        "description": "The new content to replace the specified line(s). Required for edit_file. Multiple lines can be separated by \n."
                    },
                    "delete_recursive": {
                        "type": "boolean",
                        "description": "Optional. If true, allows recursive deletion of directories and their contents. Defaults to false. Used by delete_path."
                    }
                },
                "required": [
                    "tool_name"
                ]
            }
        }
    },
    {
        "type": "function",
        "function": {
            "name": "tavily_search",
            "description": "Performs a search or extracts content using the Tavily API. Specify 'search' or 'extract' in the 'action' parameter. For 'search', provide 'query' and optionally 'topic' and 'search_depth'. For 'extract', provide 'url'. Do not use markdown formatting in your response. Do not use the asterisk symbol under any circumstances. Do not use bullet points; use numbered lists or dashes only. Always include the source URL at the end of your response.",
            "parameters": {
                "type": "object",
                "properties": {
                    "action": {
                        "type": "string",
                        "enum": ["search", "extract"],
                        "description": "The action to perform: 'search' for Tavily search API, or 'extract' for Tavily extract API."
                    },
                    "search_args": {
                        "type": "object",
                        "description": "Arguments for the Tavily search API. Required if action is 'search'.",
                        "properties": {
                            "query": {
                                "type": "string",
                                "description": "The search query."
                            },
                            "topic": {
                                "type": "string",
                                "enum": ["general", "news"],
                                "default": "general",
                                "description": "Category of the search."
                            },
                            "search_depth": {
                                "type": "string",
                                "enum": ["basic", "advanced"],
                                "default": "basic",
                                "description": "Depth of the search."
                            },
                            "chunks_per_source": {
                                "type": "integer",
                                "default": 3,
                                "description": "Number of content chunks per source (advanced search only)."
                            },
                            "max_results": {
                                "type": "integer",
                                "default": 5,
                                "description": "Maximum number of search results."
                            },
                            "time_range": {
                                "type": "string",
                                "enum": ["day", "week", "month", "year", "d", "w", "m", "y"],
                                "description": "Time range to filter results."
                            },
                            "days": {
                                "type": "integer",
                                "default": 7,
                                "description": "Number of days back to include (news topic only)."
                            },
                            "include_answer": {
                                "type": "boolean",
                                "default": false,
                                "description": "Include LLM-generated answer."
                            },
                            "include_raw_content": {
                                "type": "boolean",
                                "default": false,
                                "description": "Include cleaned HTML content of search results."
                            },
                            "include_images": {
                                "type": "boolean",
                                "default": false,
                                "description": "Include image search results."
                            },
                            "include_image_descriptions": {
                                "type": "boolean",
                                "default": false,
                                "description": "Include descriptive text for images (if include_images is true)."
                            },
                            "include_domains": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "List of domains to include."
                            },
                            "exclude_domains": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "List of domains to exclude."
                            }
                        },
                        "required": ["query"]
                    },
                    "extract_args": {
                        "type": "object",
                        "description": "Arguments for the Tavily extract API. Required if action is 'extract'.",
                        "properties": {
                            "urls": {
                                "type": "string",
                                "description": "URL(s) to extract content from. For multiple URLs, provide them as a single string separated by commas or newlines if the API supports it, or make separate calls."
                            },
                            "include_images": {
                                "type": "boolean",
                                "default": false,
                                "description": "Include images from extracted content."
                            },
                            "extract_depth": {
                                "type": "string",
                                "enum": ["basic", "advanced"],
                                "default": "basic",
                                "description": "Depth of the extraction process."
                            }
                        },
                        "required": ["urls"]
                    }
                },
                "required": ["action"]
            }
        }
    },
    {
        "type": "function",
        "function": {
            "name": "get_time",
            "description": "Get current time information. If timezone is not specified, it will use the system's timezone. Supports checking time in various timezones around the world.",
            "parameters": {
                "type": "object",
                "properties": {
                    "timezone": {
                        "type": "string",
                        "description": "Timezone to check (examples: 'Asia/Jakarta', 'America/New_York', 'Europe/London'). If not specified, will use system timezone."
                    }
                }
            }
        }
    },
    {
        "type": "function",
        "function": {
            "name": "cash_flow",
            "description": "A financial management tool to track income and expenses. Supports the following operations:\n1. add_transaction: Add a new transaction (income/expense)\n2. get_transactions: Get a list of transactions within a date range\n3. update_transaction: Update an existing transaction\n4. delete_transaction: Delete a transaction\n5. get_analytics: Get financial analytics within a date range\n6. add_category: Add a new category\n7. get_categories: Get a list of categories",
            "parameters": {
                "type": "object",
                "properties": {
                    "action": {
                        "type": "string",
                        "enum": [
                            "add_transaction",
                            "get_transactions",
                            "update_transaction",
                            "delete_transaction",
                            "get_analytics",
                            "add_category",
                            "get_categories"
                        ],
                        "description": "Action to perform"
                    },
                    "transaction": {
                        "type": "object",
                        "description": "Transaction data (required for add_transaction and update_transaction)",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": ["income", "expense"],
                                "description": "Transaction type"
                            },
                            "amount": {
                                "type": "number",
                                "description": "Transaction amount"
                            },
                            "currency": {
                                "type": "string",
                                "enum": ["IDR", "USD", "EUR", "JPY", "GBP"],
                                "default": "IDR",
                                "description": "Transaction currency (IDR: Indonesian Rupiah, USD: US Dollar, EUR: Euro, JPY: Japanese Yen, GBP: British Pound)"
                            },
                            "category": {
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "type": "string",
                                        "description": "Category ID"
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "Category name"
                                    }
                                },
                                "required": ["name"]
                            },
                            "description": {
                                "type": "string",
                                "description": "Transaction description"
                            },
                            "date": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Transaction date (format: RFC3339)"
                            }
                        },
                        "required": ["type", "amount", "category", "description", "date"]
                    },
                    "transaction_id": {
                        "type": "string",
                        "description": "Transaction ID (required for update_transaction and delete_transaction)"
                    },
                    "date_range": {
                        "type": "object",
                        "description": "Date range (required for get_transactions and get_analytics)",
                        "properties": {
                            "start": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Start date (format: RFC3339)"
                            },
                            "end": {
                                "type": "string",
                                "format": "date-time",
                                "description": "End date (format: RFC3339)"
                            }
                        },
                        "required": ["start", "end"]
                    },
                    "category": {
                        "type": "object",
                        "description": "Category data (required for add_category)",
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "Category ID (optional, will be auto-generated if not provided)"
                            },
                            "name": {
                                "type": "string",
                                "description": "Category name"
                            }
                        },
                        "required": ["name"]
                    }
                },
                "required": ["action"]
            }
        }
    },
    {
        "type": "function",
        "function": {
            "name": "calendar",
            "description": "A tool to manage calendar schedules. Supports the following operations:\n1. add_schedule: Add a new schedule\n2. update_schedule: Update an existing schedule\n3. delete_schedule: Delete a schedule\n4. search_by_date: Search schedules within a date range\n5. search_by_title: Search schedules by title\n6. search_by_tags: Search schedules by tags",
            "parameters": {
                "type": "object",
                "properties": {
                    "action": {
                        "type": "string",
                        "enum": [
                            "add_schedule",
                            "update_schedule",
                            "delete_schedule",
                            "search_by_date",
                            "search_by_title",
                            "search_by_tags"
                        ],
                        "description": "Action to perform"
                    },
                    "schedule": {
                        "type": "object",
                        "description": "Schedule data (required for add_schedule and update_schedule)",
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "Schedule ID (only for update_schedule)"
                            },
                            "title": {
                                "type": "string",
                                "description": "Schedule title"
                            },
                            "description": {
                                "type": "string",
                                "description": "Schedule description"
                            },
                            "start_time": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Start time (format: RFC3339)"
                            },
                            "end_time": {
                                "type": "string",
                                "format": "date-time",
                                "description": "End time (format: RFC3339)"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "Schedule tags"
                            }
                        },
                        "required": ["title", "description", "start_time", "end_time", "tags"]
                    },
                    "schedule_id": {
                        "type": "string",
                        "description": "Schedule ID (required for delete_schedule)"
                    },
                    "date_range": {
                        "type": "object",
                        "description": "Date range (required for search_by_date)",
                        "properties": {
                            "start": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Start date (format: RFC3339)"
                            },
                            "end": {
                                "type": "string",
                                "format": "date-time",
                                "description": "End date (format: RFC3339)"
                            }
                        },
                        "required": ["start", "end"]
                    },
                    "title": {
                        "type": "string",
                        "description": "Title for search (required for search_by_title)"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags for search (required for search_by_tags)"
                    }
                },
                "required": ["action"]
            }
        }
    },
    {
        "type": "function",
        "function": {
            "name": "converter",
            "description": "A tool to convert values between various units (excluding currency). Supported categories include Temperature (Celsius, Fahrenheit, Kelvin), Distance (meter, kilometer, centimeter, inch, foot), Mass (gram, kilogram, ounce, pound), Volume (liter, milliliter, gallon, quart), Time (second, minute, hour), and Speed (meter per second, kilometer per hour, mile per hour).",
            "parameters": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "number",
                        "description": "The value to convert"
                    },
                    "from_unit": {
                        "type": "string",
                        "description": "The source unit (e.g., meter, ounce, celsius)",
                        "enum": [
                            "celsius", "fahrenheit", "kelvin",
                            "meter", "kilometer", "centimeter", "inch", "foot",
                            "gram", "kilogram", "ounce", "pound",
                            "liter", "milliliter", "gallon", "quart",
                            "second", "minute", "hour",
                            "meter per second", "kilometer per hour", "mile per hour"
                        ]
                    },
                    "to_unit": {
                        "type": "string",
                        "description": "The target unit (e.g., kilometer, gram, fahrenheit)",
                        "enum": [
                            "celsius", "fahrenheit", "kelvin",
                            "meter", "kilometer", "centimeter", "inch", "foot",
                            "gram", "kilogram", "ounce", "pound",
                            "liter", "milliliter", "gallon", "quart",
                            "second", "minute", "hour",
                            "meter per second", "kilometer per hour", "mile per hour"
                        ]
                    }
                },
                "required": [
                    "value",
                    "from_unit",
                    "to_unit"
                ]
            }
        }
    }
]